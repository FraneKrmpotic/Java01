/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.MyApp;

import hr.algebra.dal.RepositoryMovie;
import hr.algebra.dal.sql.RepositoryFactory;
import hr.algebra.model.Genre;
import hr.algebra.model.GenreAddable;
import hr.algebra.model.GenreTransferable;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author 38595
 */
public class EditGenre extends javax.swing.JFrame implements GenreAddable {

    private static final String DELIMITER = ",";
    private static final String SPACE = " ";
    
    
    private boolean genresChanged;
    
    private EditMoviesPanel panelEdit;
    
    private List<Genre> genres = new ArrayList<Genre>();
    List<Genre> allGenres;

    private final DefaultListModel<Genre> genreModel = new DefaultListModel<>();
    private DefaultListModel<Genre> allGenreModel;
    
    private RepositoryMovie repositoryMovie;

    private Genre selectedGenre;
    /**
     * Creates new form EditGenre
     */
    public EditGenre(String genresString, EditMoviesPanel panel, boolean isGenre) {
        try {
            genres = splitAndFillCurentGenres(genresString);
            panelEdit = panel;
            genresChanged = isGenre;
            initComponents();
            init();
        } catch (Exception ex) {
            Logger.getLogger(EditGenre.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbGenre = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        liGenres = new javax.swing.JList<>();
        lbAllGenres = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        liAllGenres = new javax.swing.JList<>();
        btnDeleteGenre = new javax.swing.JButton();
        btnAddGenre = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbGenre.setText("Genres");

        jScrollPane1.setViewportView(liGenres);

        lbAllGenres.setText("AllGenres");

        jScrollPane2.setViewportView(liAllGenres);

        btnDeleteGenre.setText("Delete genre");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        btnAddGenre.setText("Add genre");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeleteGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddGenre, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)))
                    .addComponent(lbGenre))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbAllGenres))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbAllGenres)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeleteGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbGenre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
         new AddGenres(this, false).setVisible(true);
    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed
        try {
            selectedGenre = liAllGenres.getSelectedValue();
            repositoryMovie.deleteGenre(selectedGenre.getId());
            loadAllGenreModel(allGenres);
        } catch (Exception ex) {
            Logger.getLogger(AddGenres.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            String tfValue = returningString(genres);
            panelEdit.AddString(tfValue, genresChanged);
            dispose();
        } catch (Exception ex) {
            Logger.getLogger(AddGenres.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbAllGenres;
    private javax.swing.JLabel lbGenre;
    private javax.swing.JList<Genre> liAllGenres;
    private javax.swing.JList<Genre> liGenres;
    // End of variables declaration//GEN-END:variables

     private static Genre getGenre(String data) {
        String genreInfo = data;
        
        return new Genre(genreInfo);
    }
    
    private List<Genre> splitAndFillCurentGenres(String genresString) {
        List<Genre> genres = new ArrayList<>();
        if (genresString.isEmpty()) {
            return genres;
        } else {
            String[] genresInfo = genresString.split(DELIMITER);
            for (String genreInfo : genresInfo) {
                genres.add(getGenre(genreInfo));
            }
        }
        return genres;
    }

    private void init() {
        try {
            initRepository();
            loadGenreModel();
            loadAllGenreModel(allGenres);
            initDragAndDrop();
        } catch (Exception ex) {
            Logger.getLogger(EditGenre.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initRepository(){
        repositoryMovie = RepositoryFactory.getSqlRepositoryMovie();
        allGenreModel = new DefaultListModel<>();
    }

    private void loadGenreModel() {
        genreModel.clear();
        genres.forEach(genreModel::addElement);
        liGenres.setModel(genreModel);
    }

    private void loadAllGenreModel(List<Genre> allGenres) throws Exception {
        allGenres = repositoryMovie.selectGenres();
        allGenreModel.clear();
        allGenres.forEach(allGenreModel::addElement);
        liAllGenres.setModel(allGenreModel);
    }

    private void initDragAndDrop() {
        liAllGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        liAllGenres.setDragEnabled(true);
        liAllGenres.setTransferHandler(new ExportHandler());

        liGenres.setDropMode(DropMode.ON);
        liGenres.setTransferHandler(new ImportHandler());
    }

    private String returningString(List<Genre> genres) {
        StringBuilder returningString = new StringBuilder();
        for (int i = 0; i < genres.size(); i++) {
            if (genres.size() - 1 == i) {
                returningString.append(genres.get(i).toString().trim()); //.toString().trim());
            } else {
                returningString.append(genres.get(i).toString().trim());
                returningString.append(DELIMITER);
                returningString.append(SPACE);
            }
        }
        String string = returningString.toString();
        return string;
    }

    @Override
    public boolean AddGenre(Genre genre) throws Exception {
        allGenres = repositoryMovie.selectGenres();
        if (allGenres.add(genre)) {
            loadAllGenreModel(allGenres);
            return true;
        }
        return false;
    }

    private class ExportHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY; //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new GenreTransferable(liAllGenres.getSelectedValue()); //To change body of generated methods, choose Tools | Templates.
        }
    }

    private class ImportHandler extends TransferHandler {
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            try {
                Genre data = (Genre) support.getTransferable().getTransferData(GenreTransferable.GENRE_FLAVOR);
                if (genres.add(data)) {
                    loadGenreModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditGenre.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false; //To change body of generated methods, choose Tools | Templates.
        }
    }
}
